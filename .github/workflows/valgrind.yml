name: Valgrind memcheck

on: [push, pull_request]

jobs:
  valgrind:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Cpp
        uses: aminya/setup-cpp@v1.1.1
        with:
          compiler: gcc
          cmake: true
          ninja: true
          vcpkg: false
          cppcheck: false
          clangtidy: false
          sccache: true
      - name: Prepare
        run: |
          sudo apt update
          sudo apt install -y libfftw3-dev jq valgrind
      - name: Configure Cmake
        run: |
          cmake -S . -B ./build -G Ninja -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo -DFINUFFT_BUILD_TESTS=ON -DFINUFFT_ENABLE_SANITIZERS=ON
      - name: Build
        run: |
          cmake --build ./build --config RelWithDebInfo
      - name: Test
        working-directory: ./build
        run: |
          ctest --show-only=json-v1 > ctest_tests.json
          # Loop over all test entries
          jq -c '.tests[]' ctest_tests.json | while read -r test; do
            name=$(echo "$test" | jq -r '.name')
            command=$(echo "$test" | jq -r '.command | @sh')

            echo -e "\nâ–¶ Running test: $name"
            echo "   Command: $command"

            # Eval to reconstruct command array safely
            eval "cmd=( $command )"

            valgrind \
            --leak-check=full \
            --track-origins=yes \
            --errors-for-leak-kinds=all \
            --show-leak-kinds=all \
            "${cmd[@]}"
          done
      - name: Upload Valgrind report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: valgrind-report
          path: ./build/valgrind-report
