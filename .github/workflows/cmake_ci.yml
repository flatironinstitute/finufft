name: cmake ci linux macos windows

on: [push, pull_request]

jobs:
  prepare:
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.generate_matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Generate matrix
        id: generate_matrix
        run: |
          MATRIX=$(python3 ${{ github.workspace }}/.github/workflows/generate_cmake_matrix.py)
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
  pip-requirements:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          cache : 'pip'
          python-version: '3.10'
      - name: Generate requirements.txt
        run: |
          pip install --upgrade pip
          pip install pip-tools
          pip-compile --all-build-deps python/finufft/pyproject.toml -o requirements.txt
          echo pytest >> requirements.txt
          sed -i -E 's/(==|>=|<=|>|<|~=|!=).*//' requirements.txt
          cat requirements.txt
      - name: Upload requirements.txt
        uses: actions/upload-artifact@v4
        with:
          name: requirements
          path: requirements.txt
  cache:
    strategy:
      matrix:
        os:
         - ubuntu-22.04
         - windows-2022
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: create cache directory
        run: |
          mkdir -p cpm
      - name: Check if cache exists
        id: cache
        uses: actions/cache@v4
        with:
          key: cpm-cache-00-${{ runner.os == 'windows' && 'windows-' || '' }}${{ hashFiles('CMakeLists.txt', 'cmake/*') }}
          enableCrossOsArchive: true
          path: cpm
      - name: Setup Cpp
        if: steps.cache.outputs.cache-hit != 'true'
        uses: aminya/setup-cpp@v1
        with:
          cmake : true
      - name: Download dependencies in cache linux
        if: steps.cache.outputs.cache-hit != 'true' && runner.os == 'Linux'
        run: |
          cmake -S . -B ./build
          rm -rf build
          cmake -S . -B ./build -DFINUFFT_USE_DUCC0=ON
        env:
          CPM_SOURCE_CACHE: cpm
      - name: Download dependencies in cache windows
        if: steps.cache.outputs.cache-hit != 'true' && runner.os != 'Linux'
        run: |
          cmake -S . -B build
          rm build -r -force
          cmake -S . -B build -DFINUFFT_USE_DUCC0=ON
        env:
          CPM_SOURCE_CACHE: cpm
      - name: Cache dependencies
        uses: actions/cache/save@v4
        with:
          key: cpm-cache-00-${{ runner.os == 'windows' && 'windows-' || '' }}${{ hashFiles('CMakeLists.txt', 'cmake/*') }}
          enableCrossOsArchive: true
          path: cpm
  cmake-ci:
    runs-on: ${{ matrix.os }}
    needs: [prepare, cache, pip-requirements]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Restore Cache
        uses: actions/cache/restore@v4
        with:
          key: cpm-cache-00-${{ runner.os == 'windows' && 'windows-' || '' }}${{ hashFiles('CMakeLists.txt', 'cmake/*') }}
          enableCrossOsArchive: true
          path: cpm
      - name: Download requirements.txt
        uses: actions/download-artifact@v4
        with:
          name: requirements
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9
      - name: Set caching env vars
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
          echo "SCCACHE_GHA_VERSION=0" >> $GITHUB_ENV
      - name: Setup Cpp
        uses: aminya/setup-cpp@v1.1.1
        with:
          compiler: ${{ matrix.toolchain }}
          vcvarsall: ${{ contains(matrix.os, 'windows') }}
          cmake: true
          ninja: true
          vcpkg: false
          cppcheck: false
          clangtidy: false
      - name: Set min macOS version and install fftw
        if: runner.os == 'macOS'
        run: |
          brew install fftw libomp
      - name: Install fftw
        if: runner.os == 'linux'
        run: |
          sudo apt update
          sudo apt install -y libfftw3-dev
      - name: Configure Cmake
        run: |
          cmake -S . -B ./build -G Ninja -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} -DFINUFFT_ARCH_FLAGS=${{ matrix.arch_flags }} -DFINUFFT_BUILD_TESTS=ON -DFINUFFT_STATIC_LINKING=${{matrix.finufft_static_linking}} -DFINUFFT_USE_DUCC0=${{ matrix.ducc_fft }} -DFINUFFT_ENABLE_SANITIZERS=${{matrix.build_type == 'Debug'}}
        env:
          CPM_SOURCE_CACHE: cpm
      - name: Build
        run: |
          cmake --build ./build --config ${{matrix.build_type}}
      - name: Test
        working-directory: ./build
        run: |
          ctest -C ${{matrix.build_type}} --output-on-failure
      - name: Set up Python
        if: matrix.finufft_static_linking == 'off'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: requirements.txt
      - name: Build Python wheels
        if: matrix.finufft_static_linking == 'off'
        env:
          MACOSX_DEPLOYMENT_TARGET: 13
          CPM_SOURCE_CACHE: cpm
        shell: bash
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt
          python3 -m pip install \
            --verbose \
            -C cmake.define.CMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -C cmake.define.FINUFFT_ARCH_FLAGS=${{ matrix.arch_flags }} \
            -C cmake.define.FINUFFT_USE_DUCC0=${{ matrix.ducc_fft }} \
            -C cmake.define.CMAKE_CXX_COMPILER_LAUNCHER=sccache \
            -C cmake.define.CMAKE_C_COMPILER_LAUNCHER=sccache \
            -C cmake.define.CMAKE_GENERATOR=Ninja \
            -C cmake.define.CMAKE_GENERATOR_PLATFORM= \
            python/finufft
      - name: Test Python package
        if: matrix.finufft_static_linking == 'off'
        run: |
          python3 -m pytest python/finufft/test
  cleanup:
    runs-on: ubuntu-22.04
    needs: cmake-ci
    steps:
      - name: Artifact cleanup
        uses: geekyeggo/delete-artifact@v5
        with:
          name: requirements
