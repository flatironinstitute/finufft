name: cmake ci linux macos windows

on: [push, pull_request]

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate_matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Generate matrix
        id: generate_matrix
        run: |
          echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
          MATRIX=$(python3 ${{ github.workspace }}/.github/workflows/generate_cmake_matrix.py)
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
  cmake-ci:
    runs-on: ${{ matrix.os }}
    needs: prepare
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.5
      - name: Run sccache-cache only on non-release runs
        if: github.event_name != 'release' && github.event_name != 'workflow_dispatch'
        uses: mozilla-actions/sccache-action@v0.0.5
      - name: Set Rust caching env vars only on non-release runs
        if: github.event_name != 'release' && github.event_name != 'workflow_dispatch'
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.toolchain }}
          vcvarsall: ${{ contains(matrix.os, 'windows') }}
          cmake: true
          ninja: true
          vcpkg: false
          cppcheck: false
          clangtidy: false
      - name: Set min macOS version and install fftw
        if: runner.os == 'macOS'
        run: |
          brew install fftw
      - name: Install fftw
        if: runner.os == 'linux'
        run: |
          sudo apt update
          sudo apt install -y libfftw3-dev
      - name: Configure CMake Windows
        if: runner.os == 'Windows'
        run: |
            cmake -S . -B ./build -G Ninja \
              -DCMAKE_CXX_FLAGS="/FS" \
              -DCMAKE_C_FLAGS="/FS" \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \
              -DCMAKE_BUILD_TYPE:STRING=${{ matrix.build_type }} \
              -DFINUFFT_ARCH_FLAGS=${{ matrix.arch_flags }} \
              -DFINUFFT_BUILD_TESTS=ON \
              -DFINUFFT_STATIC_LINKING=${{ matrix.finufft_static_linking }} \
              -DFINUFFT_USE_DUCC0=${{ matrix.ducc_fft }}
      - name: Configure CMake Linux and MacOS
        if: runner.os != 'Windows'
        run: |
            cmake -S . -B ./build -G Ninja \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \
              -DCMAKE_BUILD_TYPE:STRING=${{ matrix.build_type }} \
              -DFINUFFT_ARCH_FLAGS=${{ matrix.arch_flags }} \
              -DFINUFFT_BUILD_TESTS=ON \
              -DFINUFFT_STATIC_LINKING=${{ matrix.finufft_static_linking }} \
              -DFINUFFT_USE_DUCC0=${{ matrix.ducc_fft }}
      - name: Build
        run: |
          cmake --build ./build --config ${{matrix.build_type}}

      - name: Test
        working-directory: ./build
        run: |
          ctest -C ${{matrix.build_type}} --output-on-failure

      - name: Set up Python
        if: matrix.finufft_static_linking
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Build Python wheels
        if: matrix.finufft_static_linking
        env:
          MACOSX_DEPLOYMENT_TARGET: 13
        shell: bash
        run: |
          python3 -m pip install \
            --verbose \
            -C cmake.define.CMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -C cmake.define.FINUFFT_ARCH_FLAGS=${{ matrix.arch_flags }} \
            -C cmake.define.FINUFFT_USE_DUCC0=${{ matrix.ducc_fft }} \
            python/finufft

      - name: Install pytest
        if: matrix.finufft_static_linking
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install pytest

      - name: Test Python package
        if: matrix.finufft_static_linking
        run: |
          python3 -m pytest python/finufft/test
