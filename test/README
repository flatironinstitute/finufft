Testing (validation not performance) directory for FINUFFT.

All source codes in here are dual precision (ie, depending on the -DSINGLE
compilation flag presence, they build in double or single precision and link
against the appropriate FINUFFT library functions).

For a fixed number of threads (the make task fixes OMP_NUM_THREADS=4), the
OpenMP static scheduling for rand-# generation means that the test data should
be reproducible (non-stochastic). Reordering of thread ops in FINUFFT itself
leads to machine-rounding sized variations only.

These CPU test executables have suffix "f" for single precision, else double.
The source codes do not have the suffix:

basicpassfail{f} : basic double and single-prec smoke tests of the math.
                   No arguments needed (exit code 0 is a pass).
finufft{1,2,3}d_test{f}: accuracy/speed tests for single transforms in
                   a given dimension. Types 1, 2, and 3 are tested.
                   (exit code 0 is a pass).
                   Call with no arguments for argument documentation.
finufft{1,2,3}dmany_test{f}: accuracy/speed tests for vectorized transforms,
                   in a given dimension. Types 1, 2, and 3 are tested.
                   (exit code 0 is a pass).
                   Call with no arguments for argument documentation.
finufft3dkernel_test{f} : test kerevalmeth=0,1 give same answer within tol.
                   Types 1, 2, and 3 are tested, in d=3 only.
                   (exit code 0 is a pass).
dumbinputs{f} :    test of edge cases, invalid inputs, and plan interface.
                   No arguments needed (exit code 0 is a pass).
testutils{f} :     test of utils module.
                   No arguments needed (exit code 0 is a pass).

check_finufft.sh : validates the FINUFFT library for correctness
                   (exit code 0 is a pass). See docs in that script.
results/*.out : outputs written by check_finufft.sh, for historical record.

Possibly obsolete scripts (for developers only):
checkallaccs.sh : spreading and NUFFT at all #s of digits, for a single ndims

Also see:
../perftest for basic performance tests
