::

 int finufft2d1(int64_t M, double* x, double* y, complex<double>* c, int iflag, double
 eps, int64_t N1, int64_t N2, complex<double>* f, finufft_opts* opts)
 int finufftf2d1(int64_t M, float* x, float* y, complex<float>* c, int iflag, float eps,
 int64_t N1, int64_t N2, complex<float>* f, finufftf_opts* opts)

 int finufft2d1many(int ntr, int64_t M, double* x, double* y, complex<double>* c, int
 iflag, double eps, int64_t N1, int64_t N2, complex<double>* f, finufft_opts* opts)
 int finufftf2d1many(int ntr, int64_t M, float* x, float* y, complex<float>* c, int iflag,
 float eps, int64_t N1, int64_t N2, complex<float>* f, finufftf_opts* opts)

   2D complex nonuniform FFT of type 1 (nonuniform to uniform).

   Computes to precision eps, via a fast algorithm, one or more transforms of the form:

                  M-1
      f[k1,k2] =  SUM c[j] exp(+/-i (k1 x[j] + k2 y[j]))
                  j=0

               for -N1/2 <= k1 <= (N1-1)/2,      -N2/2 <= k2 <= (N2-1)/2.

   Inputs:
     ntr    how many transforms (only for vectorized "many" functions, else ntr=1)
     M      number of nonuniform point sources
     x,y    nonuniform point coordinates (length M real arrays)
     c      source strengths (size M*ntr complex array)
     iflag  if >=0, uses +i in complex exponential, otherwise -i
     eps    desired relative precision; smaller is slower. This can be chosen
            from 1e-1 down to ~ 1e-14 (in double precision) or 1e-6 (in single)
     N1     number of output Fourier modes to be computed (x direction)
     N2     number of output Fourier modes to be computed (y direction)
     opts   pointer to options struct (see opts.rst), or NULL for defaults

   Outputs:
     f      Fourier mode coefficients (size N1*N2*ntr complex array)
     return value  0: success, 1: success but warning, >1: error (see error.rst)

   Notes:
     * complex arrays interleave Re, Im values, and their size is stated with
       dimensions ordered fastest to slowest.
     * Fourier frequency indices in each dimension i are the integers lying
       in [-Ni/2, (Ni-1)/2]. See above, and modeord in opts.rst for possible orderings.

::

 int finufft2d2(int64_t M, double* x, double* y, complex<double>* c, int iflag, double
 eps, int64_t N1, int64_t N2, complex<double>* f, finufft_opts* opts)
 int finufftf2d2(int64_t M, float* x, float* y, complex<float>* c, int iflag, float eps,
 int64_t N1, int64_t N2, complex<float>* f, finufftf_opts* opts)

 int finufft2d2many(int ntr, int64_t M, double* x, double* y, complex<double>* c, int
 iflag, double eps, int64_t N1, int64_t N2, complex<double>* f, finufft_opts* opts)
 int finufftf2d2many(int ntr, int64_t M, float* x, float* y, complex<float>* c, int iflag,
 float eps, int64_t N1, int64_t N2, complex<float>* f, finufftf_opts* opts)

   2D complex nonuniform FFT of type 2 (uniform to nonuniform).

   Computes to precision eps, via a fast algorithm, one or more transforms of the form:

      c[j] =   SUM   f[k1,k2] exp(+/-i (k1 x[j] + k2 y[j]))    for j = 0,...,M-1
              k1,k2
      where the sum is over integers -N1/2 <= k1 <= (N1-1)/2,
                                     -N2/2 <= k2 <= (N2-1)/2.
   Inputs:
     ntr    how many transforms (only for vectorized "many" functions, else ntr=1)
     M      number of nonuniform point targets
     x,y    nonuniform point coordinates (length M real arrays)
     iflag  if >=0, uses +i in complex exponential, otherwise -i
     eps    desired relative precision; smaller is slower. This can be chosen
            from 1e-1 down to ~ 1e-14 (in double precision) or 1e-6 (in single)
     N1     number of input Fourier modes (x direction)
     N2     number of input Fourier modes (y direction)
     f      Fourier mode coefficients (size N1*N2*ntr complex array)
     opts   pointer to options struct (see opts.rst), or NULL for defaults

   Outputs:
     c      values at nonuniform point targets (size M*ntr complex array)
     return value  0: success, 1: success but warning, >1: error (see error.rst)

   Notes:
     * complex arrays interleave Re, Im values, and their size is stated with
       dimensions ordered fastest to slowest.
     * Fourier frequency indices in each dimension i are the integers lying
       in [-Ni/2, (Ni-1)/2]. See above, and modeord in opts.rst for possible orderings.

::

 int finufft2d3(int64_t M, double* x, double* y, complex<double>* c, int iflag, double
 eps, int64_t N, double* s, double* t, complex<double>* f, finufft_opts* opts)
 int finufftf2d3(int64_t M, float* x, float* y, complex<float>* c, int iflag, float eps,
 int64_t N, float* s, float* t, complex<float>* f, finufftf_opts* opts)

 int finufft2d3many(int ntr, int64_t M, double* x, double* y, complex<double>* c, int
 iflag, double eps, int64_t N, double* s, double* t, complex<double>* f, finufft_opts*
 opts)
 int finufftf2d3many(int ntr, int64_t M, float* x, float* y, complex<float>* c, int iflag,
 float eps, int64_t N, float* s, float* t, complex<float>* f, finufftf_opts* opts)

   2D complex nonuniform FFT of type 3 (nonuniform to nonuniform).

   Computes to precision eps, via a fast algorithm, one or more transforms of the form:

               M-1
      f[k]  =  SUM  c[j] exp(+-i (s[k] x[j] + t[k] y[j])),   for k = 0,...,N-1
               j=0

   Inputs:
     ntr    how many transforms (only for vectorized "many" functions, else ntr=1)
     M      number of nonuniform point sources
     x,y    nonuniform point coordinates in R^2 (length M real arrays)
     c      source strengths (size M*ntr complex array)
     iflag  if >=0, uses +i in complex exponential, otherwise -i
     eps    desired relative precision; smaller is slower. This can be chosen
            from 1e-1 down to ~ 1e-14 (in double precision) or 1e-6 (in single)
     N      number of nonuniform frequency targets
     s,t    nonuniform frequency target coordinates in R^2 (length N real arrays)
     opts   pointer to options struct (see opts.rst), or NULL for defaults

   Outputs:
     f     Fourier transform values at targets (size N*ntr complex array)
     return value  0: success, 1: success but warning, >1: error (see error.rst)

   Notes:
     * complex arrays interleave Re, Im values, and their size is stated with
       dimensions ordered fastest to slowest.
