[build-system]
requires = [
    "scikit-build-core >= 0.4.3",
    "cmake >= 3.19",
    "ninja >= 1.9.0",
]

build-backend = "scikit_build_core.build"

[project]
name = "finufft"
readme = "README.md"
requires-python = ">=3.8"
dependencies = ["numpy >= 1.12.0", "packaging"]
authors = [
    {name = "Jeremy Magland"},
    {name = "Daniel Foreman-Mackey"},
    {name = "Joakim Anden"},
    {name = "Libin Lu"},
    {name = "Marco Barbone"},
    {name = "Robert Blackwell"},
    {name = "Alex Barnett"}]
maintainers = [{name = "Alex Barnett", email = "abarnett@flatironinstitute.org"}]
description = "Python interface to FINUFFT"
classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: C++",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows"
    ]
dynamic = ["version"]

[tool.scikit-build]
# Protect the configuration against future changes in scikit-build-core
minimum-version = "0.4"
# Setuptools-style build caching in a local directory
build-dir = "build/{wheel_tag}"

# Tell skbuild to where to find CMakeLists.txt.
cmake.source-dir = "../../"
cmake.targets = ["finufft"]
cmake.define = {"FINUFFT_BUILD_PYTHON" = "ON"}

wheel.packages = ["finufft"]

# Indicate that we don't depend on the CPython API
wheel.py-api = "py3"

sdist.exclude = [".*",
                 "CMakePresets.json",
                 "contributing.md",
                 "CHANGELOG",
                 "devel",
                 "docs",
                 "examples",
                 "fortran",
                 "Jenkinsfile",
                 "lib*",
                 "make*",
                 "matlab",
                 "perftest",
                 "test",
                 "tools",
                 "tutorial",
                 "include/cufinufft*",
                 "python/cufinufft",
                 "src/cuda"]

[tool.scikit-build.metadata.version]
# Instead of hardcoding the version here, extract it from the source files.
provider = "scikit_build_core.metadata.regex"
input = "finufft/__init__.py"

[tool.cibuildwheel]
# Necessary to see build output from the actual compilation
build-verbosity = 1
# Not building for PyPy and musllinux for now.
skip = "pp* *musllinux*"
test-requires = ["pytest", "pytest-mock"]
test-command = "pytest {project}/python/finufft/test"

# Ensure that the wheels are compatible with x86-64. Without this, they crash
# in x86_64 compatibility mode (Rosetta 2) on macOS.
config-settings = {"cmake.define.FINUFFT_ARCH_FLAGS" = "-march=x86-64", "cmake.define.CMAKE_VERBOSE_MAKEFILE" = "ON"}

# TODO: CIBW crashes when we try to make config-settings above into a table. Why?

[tool.cibuildwheel.linux]
archs = "x86_64"
before-all = "yum install -y fftw3-devel"

[tool.cibuildwheel.windows]
archs = "AMD64"
before-build = "pip install delvewheel"
# CIBW doesn't do vendoring of DLLs on Windows by default, so we have to
# install delvewheel and run it.
repair-wheel-command = "delvewheel repair -v --analyze-existing -w {dest_dir} {wheel}"
# Need to repeat this here as the platform-specific config-settings overwrite
# the general ones.
# The last setting is required to force cmake to avoid using MSVC (the
# default). By setting the generator to Ninja, cmake will pick gcc (mingw64) as
# the compiler.
config-settings = {"cmake.define.FINUFFT_ARCH_FLAGS" = "-march=x86-64", "cmake.define.CMAKE_VERBOSE_MAKEFILE" = "ON", "cmake.args" = "-G Ninja"}

[[tool.cibuildwheel.overrides]]
select = "*arm64*"
# Don't enforce x84_64 when building on arm64.
config-settings = {"cmake.define.FINUFFT_ARCH_FLAGS" = "-mcpu=apple-m3", "cmake.define.CMAKE_VERBOSE_MAKEFILE" = "ON"}
