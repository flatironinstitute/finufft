[build-system]
requires = [
    "scikit-build-core >= 0.4.3",
    "cmake (>= 3.19, < 4)",
    "ninja >= 1.9.0",
]
build-backend = "scikit_build_core.build"

[project]
name = "cufinufft"
description = "Non-uniform fast Fourier transforms on the GPU"
readme = "README.md"
requires-python = ">=3.8"
dependencies = ["numpy", "packaging"]
authors = [
    {name = "Yu-shuan Melody Shih"},
    {name = "Garrett Wright"},
    {name = "Joakim Anden"},
    {name = "Marco Barbone"},
    {name = "Robert Blackwell"},
    {name = "Johannes Blascke"},
    {name = "Alex Barnett"}]
maintainers = [{name = "Joakim Anden", email = "janden-vscholar@flatironinstitute.org"}]
classifiers = [
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: C++",
    "Operating System :: POSIX :: Linux",
    "Environment :: GPU",
    "Topic :: Scientific/Engineering :: Mathematics"
    ]
dynamic = ["version"]

[tool.scikit-build]
# Protect the configuration against future changes in scikit-build-core
minimum-version = "0.4"
# Setuptools-style build caching in a local directory
build-dir = "build/{wheel_tag}"

# Tell skbuild to where to find CMakeLists.txt.
cmake.source-dir = "../../"
cmake.targets = ["cufinufft"]
cmake.define = {"FINUFFT_BUILD_PYTHON" = "ON", "FINUFFT_USE_CUDA" = "ON", "FINUFFT_USE_CPU" = "OFF", "FINUFFT_ARCH_FLAGS" = ""}
cmake.args = ["-G Ninja"]
wheel.packages = ["cufinufft"]

# Indicate that we don't depend on the CPython API
wheel.py-api = "py3"

sdist.exclude = [".*",
                 "CMakePresets.json",
                 "contributing.md",
                 "CHANGELOG",
                 "devel",
                 "docs",
                 "examples",
                 "fortran",
                 "Jenkinsfile",
                 "lib*",
                 "make*",
                 "matlab",
                 "perftest",
                 "test",
                 "tools",
                 "tutorial",
                 "python/finufft",
                 "python/cufinufft/tests",
                 "src",
                 "wheelhouse"]
sdist.include = ["src/cuda"]

[tool.scikit-build.metadata.version]
# Instead of hardcoding the version here, extract it from the source files.
provider = "scikit_build_core.metadata.regex"
input = "cufinufft/__init__.py"


[tool.cibuildwheel]
# Necessary to see build output from the actual compilation
build-verbosity = 1
skip = "cp36-* cp37-* cp-38* pp* *-manylinux_i686 *_ppc64le *_s390x *_universal2"
config-settings = {"cmake.define.CMAKE_CUDA_ARCHITECTURES" = "50;60;70;80", "cmake.define.CIBUILDWHEEL" = "ON"}

[tool.cibuildwheel.linux]
manylinux-x86_64-image = "manylinux2014"
manylinux-aarch64-image = "manylinux2014"
repair-wheel-command = "auditwheel -v repair --exclude libcudart.so.12 --exclude libcufft.so.11 -w {dest_dir} {wheel}"

[tool.cibuildwheel.windows]
before-build = "pip install delvewheel"
# CIBW doesn't do vendoring of DLLs on Windows by default, so we have to
# install delvewheel and run it.
repair-wheel-command = "delvewheel repair -v --exclude cudart64_12.dll;cufft64_11.dll --analyze-existing -w {dest_dir} {wheel}"
